<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TAT - TextAndTag Documentation</title>
    <link>https://ovh.github.io/tat/</link>
    <description>Recent content on TAT - TextAndTag Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ovh.github.io/tat/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>General</title>
      <link>https://ovh.github.io/tat/engine/general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/engine/general/</guid>
      <description>General Specifications  Topic  Contains 0 or n messages Administrator(s) of Topic can create Topic inside it  Message  Consists of text, tags and labels Can not be deleted or modified (by default) Is limited in characters (topic setting) Is always attached to one topic  Tag  Within the message content Can not be added after message creation (by default)  Label  Can be added or removed freely Have a color  Group  Managed by an administrator(s): adding or removing users from the group Without prior authorization, a group or user has no access to topics A group or a user can be read-only or read-write on a topic  Task  A task is a message that is both in the topic task of a user and in the original topic  Administrator(s)  Tat Administrator: all configuration access On Group(s): can add/remove member(s) On Topic(s): can create Topic inside it, update parameters   Some rules and rules exception  Deleting a message is possible in the private topics, or can be granted on other topic Modification of a message is possible in private topics, or can be granted on other topic The default length of a message is 140 characters, this limit can be modified by topic A date creation of a message can be explicitly set by a system user message.</description>
    </item>
    
    <item>
      <title>General</title>
      <link>https://ovh.github.io/tat/tatcli/general/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatcli/general/</guid>
      <description>Tatcli, a Tat Command Line Interface.
See Tat Engine for more information: https://github.com/ovh/tat
Download Download latest binary on release page https://github.com/ovh/tat/releases then chmod +x tatcli
If you have already installed tatcli, you can update it with tatcli update.
Usage - General Rules A successful command will give you no feedback. If you want one, you can use -v argument. After each command, the exit code can be found in the $?</description>
    </item>
    
    <item>
      <title>Golang - A simple main example</title>
      <link>https://ovh.github.io/tat/sdk/golang-simple-main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/sdk/golang-simple-main/</guid>
      <description>Usage  cd &amp;lt;directory-containing-main.go&amp;gt;/ go get -u github.com/ovh/tat build &amp;amp;&amp;amp; ./mycli-minimal -url=http://url-tat-engine -username=&amp;lt;tatUsername&amp;gt; -password=&amp;lt;tatPassword&amp;gt; /Internal/your/topic your message  File main.go package main import ( &amp;quot;flag&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strings&amp;quot; &amp;quot;github.com/ovh/tat&amp;quot; ) // taturl, username / password of tat engine var ( taturl string username string password string ) func main() { flag.StringVar(&amp;amp;taturl, &amp;quot;url&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;URL of Tat Engine&amp;quot;) flag.StringVar(&amp;amp;username, &amp;quot;username&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;tat username&amp;quot;) flag.StringVar(&amp;amp;password, &amp;quot;password&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;tat password&amp;quot;) flag.Parse() client, err := tat.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ovh.github.io/tat/overview/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/overview/introduction/</guid>
      <description>Tat, aka Text And Tags, is a communication tool - Human &amp;amp; Robot all together.
Some use cases:
 Viewing Pull Requests, Build And Deployment in one place Alerting &amp;amp; Monitoring Overview Agile view as simple as a whiteboard with post-it Team Communication &amp;amp; Reporting facilities &amp;hellip;  Tat Engine exposes only an HTTP REST API. You can manipulate this API with Tat Command Line Interface, aka tatcli, see https://github.com/ovh/tat/tree/master/tatcli.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://ovh.github.io/tat/tatwebui/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatwebui/introduction/</guid>
      <description>Tatwebui is a web application, with a nodejs HTTP Server for serving js/html/css files. This application requests Tat Engine for all actions:
 Rights Controls, Users &amp;amp; Groups Topics management, parameters, ACLs Manipulate messages  The views are used to display messages in different ways. Views are plugins, see Standard View for example. Some OVH views are opensourced like:
 Standard View: standard view with all features on messages Notifications View: display user notifications in /Private/username/Notifications topic Monitoring View: quick look on many items, UP or Down Release View: Plan, Changelog, Release&amp;hellip; communicate with others teams Dashing View: widgets, graph&amp;hellip; one way to create dashing about everything Pastat View: a Gist like CDS View: Display CDS Notifications  </description>
    </item>
    
    <item>
      <title>al2tat</title>
      <link>https://ovh.github.io/tat/ecosystem/al2tat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/al2tat/</guid>
      <description>This microservice can be used :
 to send alerts to Tat (https://github.com/ovh/tat). to send monitoring events to Tat.  Alerts An alert is an event with a &amp;lsquo;AL&amp;rsquo; status. An alert can be replayed, al2tat attach this on a root message. If there is a new occurrence with same summary with &amp;lsquo;UP&amp;rsquo; status, alert will be closed. Best Tat view for theses: StandardView (https://github.com/ovh/tatwebui-plugin-standardview)
 Compute Replay: if alarm already exists, the replay will be a reply of root alarm Pre-select Label :  a new alarm &amp;ldquo;AL&amp;rdquo; will receive label &amp;ldquo;open&amp;rdquo; with red color on tat a new alarm &amp;ldquo;UP&amp;rdquo; will receive label &amp;ldquo;done&amp;rdquo; with green color on tat A new alarm &amp;ldquo;AL&amp;rdquo; will close previous &amp;ldquo;AL&amp;rdquo; in same thread   Monitoring Events An event monitoring is attached to one item (host, soft, person&amp;hellip; whatever), all events are held three days, and only 30 events are retained after 3d.</description>
    </item>
    
    <item>
      <title>API - Messages</title>
      <link>https://ovh.github.io/tat/engine/api-messages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/engine/api-messages/</guid>
      <description>Store a new message curl -XPOST \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: username&amp;quot; \ -H &amp;quot;Tat_password: passwordOfUser&amp;quot; \ -d &#39;{ &amp;quot;text&amp;quot;: &amp;quot;text&amp;quot; }&#39; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/message/a-topic/sub-topic  You can add labels from the creation
curl -XPOST \ -H &#39;Content-Type: application/json&#39; \ -H &amp;quot;Tat_username: username&amp;quot; \ -H &amp;quot;Tat_password: passwordOfUser&amp;quot; \ -d &#39;{ &amp;quot;text&amp;quot;: &amp;quot;text&amp;quot;, &amp;quot;dateCreation&amp;quot;: 11123232, &amp;quot;labels&amp;quot;: [{&amp;quot;text&amp;quot;: &amp;quot;labelA&amp;quot;, &amp;quot;color&amp;quot;: &amp;quot;#eeeeee&amp;quot;}, {&amp;quot;text&amp;quot;: &amp;quot;labelB&amp;quot;, &amp;quot;color&amp;quot;: &amp;quot;#ffffff&amp;quot;}] }&#39; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/message/a-topic/sub-topic  You can add replies from the creation</description>
    </item>
    
    <item>
      <title>Concepts</title>
      <link>https://ovh.github.io/tat/overview/concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/overview/concepts/</guid>
      <description>Four Concepts: Topic / Message / Tag / Label  Topic  Contains 0 or n messages Administrator(s) of Topic can create Topic inside it  Message  Consists of text, tags and labels Can not be deleted or modified (by default) Is limited in characters (topic setting) Is always attached to one topic  Tag  Within the message content Can not be added after message creation (by default)  Label  Can be added or removed freely Have a color   Think about messages as plain information pieces, their meaning are contextualized through microservices using those messages and views you plug on their topics.</description>
    </item>
    
    <item>
      <title>Golang - Full Example</title>
      <link>https://ovh.github.io/tat/sdk/golang-full-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/sdk/golang-full-example/</guid>
      <description>Usage This example uses viper, cobra and tatcli config file.
Usage: go build &amp;amp;&amp;amp; ./mycli-full demo /YouTopic/subTopic your message with a config file: go build &amp;amp;&amp;amp; ./mycli-full --configFile $HOME/.tatcli/config.local.json demo /YouTopic/subTopic your message  File main.go package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; log &amp;quot;github.com/Sirupsen/logrus&amp;quot; &amp;quot;github.com/ovh/tat&amp;quot; &amp;quot;github.com/spf13/cobra&amp;quot; &amp;quot;github.com/spf13/viper&amp;quot; ) var rootCmd = &amp;amp;cobra.Command{ Use: &amp;quot;mycli-full&amp;quot;, Long: `SDK Use Demo`, } // URL of tat engine, tat username and tat password var ( home = os.</description>
    </item>
    
    <item>
      <title>Standard View</title>
      <link>https://ovh.github.io/tat/tatwebui/standardview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatwebui/standardview/</guid>
      <description>Screenshots Messages - List Messages - Edit Configuration In plugin.tpl.json file, add this line :
&amp;quot;tatwebui-plugin-standardview&amp;quot;: &amp;quot;git+https://github.com/ovh/tatwebui-plugin-standardview.git&amp;quot;  Source https://github.com/ovh/tatwebui-plugin-standardview</description>
    </item>
    
    <item>
      <title>mail2tat</title>
      <link>https://ovh.github.io/tat/ecosystem/mail2tat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/mail2tat/</guid>
      <description>Create a message on Tat by sending a mail. Mail2tat check an imap account and create a message for each mail received.
Tat Configuration  Add Read Write to user tat.system.mail on your destination topic Check option : &amp;ldquo;System User can force dateCreation of message ?&amp;rdquo;  Simple usage Send a mail to tat@your-domain with
subjet : &amp;lt;topicName&amp;gt; Body : text of message  Example of subject : /Internal/YourTopic</description>
    </item>
    
    <item>
      <title>tatcli config -h</title>
      <link>https://ovh.github.io/tat/tatcli/tatcli-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatcli/tatcli-config/</guid>
      <description>Command Description tatcli config -h Config commands: tatcli config &amp;lt;command&amp;gt; Usage: tatcli config [command] Aliases: config, c Available Commands: template Write a template configuration file in $HOME/.tatcli/config.json: tatcli config template show Show Configuration: tatcli config show Flags: -h, --help=false: help for config Global Flags: see tatcli -h Use &amp;quot;tatcli config [command] --help&amp;quot; for more information about a command.  Example Credentials Config file is under $HOME/.tatcli/config.json You can create it with this command:</description>
    </item>
    
    <item>
      <title>API - Topics</title>
      <link>https://ovh.github.io/tat/engine/api-topics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/engine/api-topics/</guid>
      <description>Create a Topic Rules:
 User can create a root topic if he is a Tat Admin. User can create topics under /Private/username/ User can create topics if he is an admin on the Parent Topic or belong to an admin group on the Parent topic. Example: Create /AAA/BBB: Parent Topic is /AAA  curl -XPOST \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: admin&amp;quot; \ -H &amp;quot;Tat_password: passwordAdmin&amp;quot; \ -d &#39;{&amp;quot;topic&amp;quot;: &amp;quot;/topicA&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;Topic Description&amp;quot;}&#39; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/topic  Delete a topic curl -XDELETE \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: admin&amp;quot; \ -H &amp;quot;Tat_password: passwordAdmin&amp;quot; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/topic/subtopic  Truncate a topic Only for Tat Admin and administrators on topic.</description>
    </item>
    
    <item>
      <title>DevOps LifeCycle / Feedback Loop</title>
      <link>https://ovh.github.io/tat/overview/lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/overview/lifecycle/</guid>
      <description>Feedback everywhere We want feedback, not only when applications are in production, but everywhere. PullRequest, build, Release, Monitoring, etc&amp;hellip;
Following examples show how we are using Tat through our DevOps lifecycle @ OVH.
First of all, TaT was designed to be a hub of all Continuous Delivery and DevOps communcation. By plugin all the software running in Plug all the software running in your DevOps ecosystem to Tat, you&amp;rsquo;ll be able to follow all the things in TaT and improve as well team and machines collaboration]</description>
    </item>
    
    <item>
      <title>Notifications View</title>
      <link>https://ovh.github.io/tat/tatwebui/notificationsview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatwebui/notificationsview/</guid>
      <description>When a message contains a mention for someone, a other message is created by Tat Engine in topic /Private/username/Notifications, where username is the user mentioned.
Example :
 a message &amp;ldquo;a first notification for @yesnault&amp;rdquo; in topic /Internal/App a other message &amp;ldquo;and a second @yesnault in topic /Internal/App&amp;rdquo; in topic /Internal/App  see result in screenshot below for these two messages in topic /Private/yesnault/Notifications
Screenshot Configuration In plugin.tpl.json file, add this line :</description>
    </item>
    
    <item>
      <title>tat2es</title>
      <link>https://ovh.github.io/tat/ecosystem/tat2es/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/tat2es/</guid>
      <description>Get messages from TAT and send them to ElasticSearch.
TAT2ES Configuration export TAT2ES_LISTEN_PORT=&amp;quot;8080&amp;quot; export TAT2ES_USERNAME_TAT_ENGINE=&amp;quot;tat.system.jabber&amp;quot; export TAT2ES_PRODUCTION=true export TAT2ES_PASSWORD_TAT_ENGINE=&amp;quot;very-long-tat-password-of-tat.system.jabber&amp;quot; export TAT2ES_URL_TAT_ENGINE=&amp;quot;http://tat.your-domain&amp;quot; export TAT2ES_TOPICS_INDEXES=&amp;quot;/Topic/Sub-Topic1:ES_Index1,/Topic/Sub-Topic2:ES_Index2&amp;quot; # Run TAT2ES ./api -h  Usage Building mkdir -p $GOPATH/src/github.com/ovh cd $GOPATH/src/github.com/ovh git clone git@github.com:ovh/tat-contrib.git cd tat-contrib/tat2es/api go build ./api -h  Flags ./api -h TAT To ElasticSearch Usage: tat2es [flags] tat2es [command] Available Commands: version Print the version. Flags: --cron-schedule string Cron Schedule, see https://godoc.</description>
    </item>
    
    <item>
      <title>tatcli group -h</title>
      <link>https://ovh.github.io/tat/tatcli/tatcli-group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatcli/tatcli-group/</guid>
      <description>Command Description tatcli group -h Group commands: tatcli group &amp;lt;command&amp;gt; Usage: tatcli group [command] Aliases: group, g Available Commands: list List all groups: tatcli group list &amp;lt;skip&amp;gt; &amp;lt;limit&amp;gt; create create a new group: tatcli group create &amp;lt;groupname&amp;gt; &amp;lt;description&amp;gt; update update a group: tatcli group update &amp;lt;groupname&amp;gt; &amp;lt;newGroupname&amp;gt; &amp;lt;newDescription&amp;gt; delete delete a group: tatcli group delete &amp;lt;groupname&amp;gt; addUser Add Users to a group: tacli group addUser &amp;lt;groupname&amp;gt; &amp;lt;username1&amp;gt; [&amp;lt;username2&amp;gt; ... ] deleteUser Delete Users from a group: tacli group deleteUser &amp;lt;groupname&amp;gt; &amp;lt;username1&amp;gt; [&amp;lt;username2&amp;gt; .</description>
    </item>
    
    <item>
      <title>API - Users</title>
      <link>https://ovh.github.io/tat/engine/api-users/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/engine/api-users/</guid>
      <description>Tat Password It&amp;rsquo;s a generated password by Tat, allowing username to communicate with Tat. User creates an account, a mail is send to verify account and user has to go on a Tat URL to validate account and get password. Password is encrypted in Tat Database (sha512 Sum).
First user created is an administrator.
Create a User Return a mail to user, with instruction to validate his account.
curl -XPOST \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -d &#39;{&amp;quot;username&amp;quot;: &amp;quot;userA&amp;quot;, &amp;quot;fullname&amp;quot;: &amp;quot;User AA&amp;quot;, &amp;quot;email&amp;quot;: &amp;quot;usera@foo.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://ovh.github.io/tat/overview/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/overview/architecture/</guid>
      <description>Main components of a Tat Installation are:
 Tat, also called Tat Engine. Your can running as many Engine as you want. You can imagine running many Tat-Engine instances on Mesos/Marathon, Kubernetes or Swarm, or configure yourself behind a reverse proxy. Source: http://github.com/ovh/tat Tatwebui: it&amp;rsquo;s a web application, an easier way to call Tat Engine than curl. This application is component oriented, your can display messages with different Views. See next chapter about Tatwebui for more information.</description>
    </item>
    
    <item>
      <title>Monitoring View</title>
      <link>https://ovh.github.io/tat/tatwebui/monitoringview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatwebui/monitoringview/</guid>
      <description>Screenshot Using Send to Tat Engine The screenshot above was created with these messages:
tatcli topic truncate /Private/yesnault/Monitoring --force for i in {1..99}; do for j in {1..20}; do MTYPE=&amp;quot;UP&amp;quot;; COLOR=&amp;quot;#6C6&amp;quot;; if [ ${j} -eq 7 ]; then MTYPE=&amp;quot;AL&amp;quot;; COLOR=&amp;quot;d9534f&amp;quot;; fi; tatcli msg add /Private/yesnault/Monitoring &amp;quot;#monitoring #myService #item:myItem${i}${j}&amp;quot; --label=&amp;quot;$COLOR;$MTYPE&amp;quot; done done  Production Way with al2tat Send a monitoring message to al2tat microservice on path /monitoring. See https://github.com/ovh/al2tat
Configuration In plugin.</description>
    </item>
    
    <item>
      <title>tat2xmpp</title>
      <link>https://ovh.github.io/tat/ecosystem/tat2xmpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/tat2xmpp/</guid>
      <description>What&amp;rsquo;s for? tat2xmpp allow you to:
 sync XMPP conference with a Tat topic, from conference to tat, from tat to conference, or both. request Tat over XMPP  On your XMPP Client:
/tat help  will returns:
Begin conversation with &amp;quot;tat,&amp;quot; or &amp;quot;/tat&amp;quot; Simple request: &amp;quot;tat, ping&amp;quot; Request tat: &amp;quot;/tat COUNT /Internal/Alerts?tag=NETWORK,label=open&amp;quot; &amp;quot;/tat GET /Internal/Alerts?tag=PUBCLOUD-serv,PUBCLOUD-host&amp;amp;label=open&amp;quot; Request tat and format output: &amp;quot;/tat COUNT /Internal/Alerts?tag=NETWORK,label=open format:dateUpdate,username,text&amp;quot; Default format:dateUpdate,username,text,labels You can use: id,text,topic,inReplyOfID,inReplyOfIDRoot,nbLikes,labels, votersUP,votersDown,nbVotesUP,nbVotesDown,userMentions, urls,tags,dateCreation,dateUpdate,username,fullname,nbReplies,tatwebuiURL User tat.</description>
    </item>
    
    <item>
      <title>tatcli message -h</title>
      <link>https://ovh.github.io/tat/tatcli/tatcli-message/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatcli/tatcli-message/</guid>
      <description>Command Description tatcli message -h Manipulate messages: tatcli message &amp;lt;command&amp;gt; Usage: tatcli message [command] Aliases: message, m, msg Available Commands: add tatcli message add [--dateCreation=timestamp] &amp;lt;topic&amp;gt; &amp;lt;my message&amp;gt; concat Update a message (if it&#39;s enabled on topic) by adding additional text at the end of message: tatcli message concat &amp;lt;topic&amp;gt; &amp;lt;idMessage&amp;gt; &amp;lt;additional text...&amp;gt; delete Delete a message: tatcli message delete &amp;lt;topic&amp;gt; &amp;lt;idMessage&amp;gt; [--cascade] [--cascadeForce] deletebulk Delete a list of messages: tatcli message deletebulk &amp;lt;topic&amp;gt; &amp;lt;skip&amp;gt; &amp;lt;limit&amp;gt; [--cascade] [--cascadeForce] label Add a label to a message: tatcli message label &amp;lt;topic&amp;gt; &amp;lt;idMessage&amp;gt; &amp;lt;colorInHexa&amp;gt; &amp;lt;my Label&amp;gt; like Like a message: tatcli message like &amp;lt;topic&amp;gt; &amp;lt;idMessage&amp;gt; list List all messages on one topic: tatcli msg list &amp;lt;Topic&amp;gt; &amp;lt;skip&amp;gt; &amp;lt;limit&amp;gt; move Move a message: tatcli message move &amp;lt;oldTopic&amp;gt; &amp;lt;idMessage&amp;gt; &amp;lt;newTopic&amp;gt; relabel Remove all labels and add new ones to a message: tatcli msg relabel &amp;lt;topic&amp;gt; &amp;lt;idMessage&amp;gt; --label=&amp;quot;#EEEE;myLabel1,#EEEE;myLabel2&amp;quot; --options=&amp;quot;myLabelToRemove1,myLabelToRemove2&amp;quot; reply Reply to a message: tatcli message reply &amp;lt;topic&amp;gt; &amp;lt;inReplyOfId&amp;gt; &amp;lt;my message.</description>
    </item>
    
    <item>
      <title>tatdashing</title>
      <link>https://ovh.github.io/tat/ecosystem/tatdashing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/tatdashing/</guid>
      <description>Overview Each 30seconds, tatDashing computes dashboard. This uService gets information on tat and &amp;ldquo;relabel&amp;rdquo; messages on your dashing topic.
Build And Run Configuration export TATDASHING_PRODUCTION=true export TATDASHING_LISTEN_PORT=8080 export TATDASHING_PASSWORD_TAT_ENGINE=&amp;quot;very-long-tat-password-of-tat.system.dashing&amp;quot; export TATDASHING_URL_TAT_ENGINE=&amp;quot;http://tat.your-domain&amp;quot; export TATDASHING_USERNAME_TAT_ENGINE=&amp;quot;tat.system.dashing&amp;quot; # Run TatDashing ./api -h  Build mkdir -p $GOPATH/src/github.com/ovh cd $GOPATH/src/github.com/ovh git clone git@github.com:ovh/tat-contrib.git cd tat-contrib/tatdashing/api go build ./api -h  Flags $ ./api -h Tat Dashing Usage: tatdashing [flags] Flags: --listen-port string Listen Port (default &amp;quot;8085&amp;quot;) --log-level string Log Level : debug, info or warn --password-tat-engine string Password Tat Engine --production Production mode --url-tat-engine string URL Tat Engine (default &amp;quot;http://localhost:8080&amp;quot;) --username-tat-engine string Username Tat Engine (default &amp;quot;tat.</description>
    </item>
    
    <item>
      <title>API - Groups</title>
      <link>https://ovh.github.io/tat/engine/api-groups/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/engine/api-groups/</guid>
      <description>Create a group Only for Tat Admin
curl -XPOST \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: admin&amp;quot; \ -H &amp;quot;Tat_password: passwordAdmin&amp;quot; \ -d &#39;{&amp;quot;name&amp;quot;: &amp;quot;groupName&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;Group Description&amp;quot;}&#39; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/group  Update a group Only for Tat Admin
curl -XPUT \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: admin&amp;quot; \ -H &amp;quot;Tat_password: passwordAdmin&amp;quot; \ -d &#39;{&amp;quot;newName&amp;quot;: &amp;quot;groupName&amp;quot;, &amp;quot;newDescription&amp;quot;: &amp;quot;Group Description&amp;quot;}&#39; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/group/&amp;lt;groupName&amp;gt;  Getting groups List curl -XGET https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/groups?skip=&amp;lt;skip&amp;gt;&amp;amp;limit=&amp;lt;limit&amp;gt; | python -m json.</description>
    </item>
    
    <item>
      <title>Contribute</title>
      <link>https://ovh.github.io/tat/overview/contribute/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/overview/contribute/</guid>
      <description>Contributing You&amp;rsquo;ve developed a new cool feature? Fixed an annoying bug? We&amp;rsquo;d be happy to hear from you! Make sure to read CONTRIBUTING file on repository concerned before.
Code Main Components  Tat Engine Doc - http://github.com/ovh/tat - LICENSE - CONTRIBUTING Tatwebui Doc - http://github.com/ovh/tatwebui - LICENSE - CONTRIBUTING Tatcli Doc - http://github.com/ovh/tat/tatcli - LICENSE - CONTRIBUTING  Views  CDS View Doc - https://github.com/ovh/tatwebui-plugin-cdsview - LICENSE - CONTRIBUTING Dashing View Doc - https://github.</description>
    </item>
    
    <item>
      <title>Pastat View</title>
      <link>https://ovh.github.io/tat/tatwebui/pastatview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatwebui/pastatview/</guid>
      <description>Screenshots Messages - List Messages - Edit Configuration In plugin.tpl.json file, add this line :
&amp;quot;tatwebui-plugin-dashingview&amp;quot;: &amp;quot;git+https://github.com/ovh/tatwebui-plugin-dashingview.git&amp;quot;  Source https://github.com/ovh/tatwebui-plugin-pastatview</description>
    </item>
    
    <item>
      <title>tatcli presence -h</title>
      <link>https://ovh.github.io/tat/tatcli/tatcli-presence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatcli/tatcli-presence/</guid>
      <description> Command Description tatcli presence -h Presence commands: tatcli presence [&amp;lt;command&amp;gt;] Usage: tatcli presence [command] Aliases: presence, p Available Commands: add Add a new presence on one topic with status (online, offline, busy): tatcli presence add &amp;lt;topic&amp;gt; &amp;lt;status&amp;gt; delete Delete a user&#39;s presence on one topic: tatcli presence delete &amp;lt;topic&amp;gt; &amp;lt;username&amp;gt; list List all presences on one topic: tatcli presence list &amp;lt;topic&amp;gt; [&amp;lt;skip&amp;gt;] [&amp;lt;limit&amp;gt;] Flags: -h, --help=false: help for presence Global Flags: see tatcli -h  </description>
    </item>
    
    <item>
      <title>API - Presences</title>
      <link>https://ovh.github.io/tat/engine/api-presences/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/engine/api-presences/</guid>
      <description>Add presence Status could be: online, offline, busy.
curl -XPOST \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: username&amp;quot; \ -H &amp;quot;Tat_password: passwordOfUser&amp;quot; \ -d &#39;{ &amp;quot;status&amp;quot;: &amp;quot;online&amp;quot; }&#39; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/presenceget/topic/sub-topic  Getting Presences curl -XGET https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/presences/&amp;lt;topic&amp;gt;?skip=&amp;lt;skip&amp;gt;&amp;amp;limit=&amp;lt;limit&amp;gt; | python -m json.tool curl -XGET https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/presences/&amp;lt;topic&amp;gt;?skip=&amp;lt;skip&amp;gt;&amp;amp;limit=&amp;lt;limit&amp;gt;&amp;amp;argName=valName&amp;amp;arg2Name=val2Name | python -m json.tool  Parameters  topic: /yourTopic/subTopic skip: Skip skips over the n initial presences from the query results limit: Limit restricts the maximum number of presences retrieved status: status: online, offline, busy dateMinPresence: filter result on datePresence, timestamp Unix format dateMaxPresence: filter result on datePresence, timestamp Unix Format username: username to search  Examples curl -XGET https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/presences/topicA?</description>
    </item>
    
    <item>
      <title>API - System</title>
      <link>https://ovh.github.io/tat/engine/api-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/engine/api-system/</guid>
      <description>System Version curl -XGET https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/version  Stats For Tat admin only.
Count curl -XPUT \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: admin&amp;quot; \ -H &amp;quot;Tat_password: passwordAdmin&amp;quot; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/stats/count  Instance Info about current instance of engine
curl -XPUT \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: admin&amp;quot; \ -H &amp;quot;Tat_password: passwordAdmin&amp;quot; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/stats/instance  Distribution curl -XPUT \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: admin&amp;quot; \ -H &amp;quot;Tat_password: passwordAdmin&amp;quot; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/stats/distribution  DB Stats curl -XPUT \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: admin&amp;quot; \ -H &amp;quot;Tat_password: passwordAdmin&amp;quot; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/stats/db/stats  DB ServerStatus curl -XPUT \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: admin&amp;quot; \ -H &amp;quot;Tat_password: passwordAdmin&amp;quot; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/stats/db/serverStatus  DB Replica Set Status curl -XPUT \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: admin&amp;quot; \ -H &amp;quot;Tat_password: passwordAdmin&amp;quot; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/stats/db/replSetGetStatus  DB Replica Set Config curl -XPUT \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: admin&amp;quot; \ -H &amp;quot;Tat_password: passwordAdmin&amp;quot; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/stats/db/replSetGetConfig  DB Stats of each collections curl -XPUT \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: admin&amp;quot; \ -H &amp;quot;Tat_password: passwordAdmin&amp;quot; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/stats/db/collections  DB Stats slowest Queries curl -XPUT \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: admin&amp;quot; \ -H &amp;quot;Tat_password: passwordAdmin&amp;quot; \ https://&amp;lt;tatHostname&amp;gt;:&amp;lt;tatPort&amp;gt;/stats/db/slowestQueries  System Capabilities Return websocket-enabled and username-from-email parameters.</description>
    </item>
    
    <item>
      <title>Dashing View</title>
      <link>https://ovh.github.io/tat/tatwebui/dashingview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatwebui/dashingview/</guid>
      <description>Usage This screenshot
can be done by sending info with tatcli :
tatcli msg add /Internal/YourTopic/Dashing &amp;quot;#monitoring&amp;quot; \ --label=&amp;quot;#eeeee;border-width:0px&amp;quot; \ --label=&amp;quot;#eeeee;height:110px&amp;quot; \ --label=&amp;quot;#eeeee;hide-bottom&amp;quot; \ --label=&amp;quot;#eeeee;order:1&amp;quot; \ --label=&amp;quot;#eeeee;value:MyDashing&amp;quot; \ --label=&amp;quot;#eeeee;width:96%&amp;quot; \ --label=&amp;quot;#ffffff;color&amp;quot; \ --label=&amp;quot;#161d23;bg-color&amp;quot; tatcli msg add /Internal/YourTopic/Dashing &amp;quot;#monitoring&amp;quot; \ --label=&amp;quot;#93c47d;bg-color&amp;quot; \ --label=&amp;quot;#eeeee;border-width:0px&amp;quot; \ --label=&amp;quot;#eeeee;height:5px&amp;quot; \ --label=&amp;quot;#eeeee;hide-bottom&amp;quot; \ --label=&amp;quot;#eeeee;order:2&amp;quot; \ --label=&amp;quot;#eeeee;value&amp;quot; \ --label=&amp;quot;#eeeee;value&amp;quot; \ --label=&amp;quot;#eeeee;value&amp;quot; \ --label=&amp;quot;#eeeee;color&amp;quot; \ --label=&amp;quot;#eeeee;width:96.3%&amp;quot; tatcli msg add /Internal/YourTopic/Dashing &amp;quot;#monitoring&amp;quot; \ --label=&amp;quot;#161d23;bg-color&amp;quot; \ --label=&amp;quot;#eeeee;border-width:0px&amp;quot; \ --label=&amp;quot;#eeeee;color&amp;quot; \ --label=&amp;quot;#eeeee;height:20px&amp;quot; \ --label=&amp;quot;#eeeee;hide-bottom&amp;quot; \ --label=&amp;quot;#eeeee;order:3&amp;quot; \ --label=&amp;quot;#eeeee;width:96%&amp;quot; tatcli msg add /Internal/YourTopic/Dashing &amp;quot;#monitoring #YourTeam #item:OCO_Critical&amp;quot; \ --label=&amp;quot;#e8f1f4;bg-color&amp;quot; \ --label=&amp;quot;#ce352c;color&amp;quot; \ --label=&amp;quot;#eeeee;order:11&amp;quot; \ --label=&amp;quot;#eeeee;value:79&amp;quot; tatcli msg add /Internal/YourTopic/Dashing &amp;quot;#monitoring #YourTeam #item:OCO_Warn&amp;quot; \ --label=&amp;quot;#e8f1f4;bg-color&amp;quot; \ --label=&amp;quot;#fa6800;color&amp;quot; \ --label=&amp;quot;#eeeee;order:12&amp;quot; \ --label=&amp;quot;#eeeee;value:2312&amp;quot; tatcli msg add /Internal/YourTopic/Dashing &amp;quot;#monitoring #YourTeam #item:OCO_Info&amp;quot; \ --label=&amp;quot;#e8f1f4;bg-color&amp;quot; \ --label=&amp;quot;#60a917;color&amp;quot; \ --label=&amp;quot;#eeeee;order:13&amp;quot; \ --label=&amp;quot;#eeeee;value:2714&amp;quot; tatcli msg add /Internal/YourTopic/Dashing &amp;quot;#monitoring #YourTeam #item:StatusCake_Tests&amp;quot; \ --label=&amp;quot;#e8f1f4;bg-color&amp;quot; \ --label=&amp;quot;#63305a;color&amp;quot; \ --label=&amp;quot;#eeeee;order:15&amp;quot; \ --label=&amp;quot;#eeeee;value:15/15&amp;quot; tatcli msg add /Internal/YourTopic/Dashing &amp;quot;#monitoring #YourTeam #item:checkFilerz A&amp;quot; \ --label=&amp;quot;#eeeee;order:18&amp;quot; \ --label=&amp;quot;#e8f1f4;bg-color&amp;quot; \ --label=&#39;#eeeeee;widget:progressbar&#39; \ --label=&#39;#eeeeee;percentRunning:70&#39; \ --label=&#39;#1ba1e2;color&#39; \ --label=&#39;#eeeeee;widget-class:success&#39; \ --label=&#39;#eeeeee;widget-mode:vertical&#39; tatcli msg add /Internal/YourTopic/Dashing &amp;quot;#monitoring #YourTeam #item:checkFilerz B&amp;quot; \ --label=&amp;quot;#eeeee;order:19&amp;quot; \ --label=&amp;quot;#e8f1f4;bg-color&amp;quot; \ --label=&#39;#eeeeee;widget:progressbar&#39; \ --label=&#39;#eeeeee;percentRunning:30&#39; \ --label=&#39;#1ba1e2;color&#39; \ --label=&#39;#eeeeee;widget-class:success&#39; \ --label=&#39;#eeeeee;widget-mode:horizontal&#39; tatcli msg add /Internal/YourTopic/Dashing &amp;quot;#monitoring #YourTeam #item:checkFilerz C&amp;quot; \ --label=&amp;quot;#eeeee;order:20&amp;quot; \ --label=&amp;quot;#e8f1f4;bg-color&amp;quot; \ --label=&#39;#eeeeee;widget:progressbar&#39; \ --label=&#39;#eeeeee;percentRunning:25&#39; \ --label=&#39;#eeeeee;widget-class:warning&#39; \ --label=&#39;#eeeeee;widget-mode:horizontal&#39; tatcli msg add /Internal/YourTopic/Dashing &amp;quot;#monitoring #YourTeam #item:StatusUP&amp;quot; \ --label=&amp;quot;#eeeee;order:21&amp;quot; \ --label=&amp;quot;#60a917;bg-color&amp;quot; \ --label=&amp;quot;#ffffff;color&amp;quot; \ --label=&amp;quot;#eeeeee;value:79&amp;quot; tatcli msg add /Internal/YourTopic/Dashing &amp;quot;#monitoring #YourTeam #item:Status&amp;quot; \ --label=&amp;quot;#eeeee;order:22&amp;quot; \ --label=&amp;quot;#60a917;bg-color&amp;quot; \ --label=&amp;quot;#ffffff;color&amp;quot; \ --label=&amp;quot;#eeeeee;value::)&amp;quot; tatcli msg add /Internal/YourTopic/Dashing &amp;quot;#monitoring #YourTeam #item:Status&amp;quot; \ --label=&amp;quot;#eeeee;order:22&amp;quot; \ --label=&amp;quot;#60a917;bg-color&amp;quot; \ --label=&amp;quot;#ffffff;color&amp;quot; \ --label=&amp;quot;#eeeeee;value:↑&amp;quot; tatcli msg add /Internal/YourTopic/Dashing &amp;quot;#monitoring #item:Pie&amp;quot; \ --label=&amp;quot;#eeeee;order:23&amp;quot; \ --label=&amp;quot;#e8f1f4;bg-color&amp;quot; \ --label=&amp;quot;#eeeeee;width:20%&amp;quot; \ --label=&#39;#eeeee;widget-data-serie:20 30 40&#39; \ --label=&#39;#eeeee;widget-options:donut:true donutWidth:60 startAngle:270 total:200 showLabel:false&#39; \ --label=&#39;#eeeee;widget:Pie&#39; tatcli msg add /Internal/YourTopic/Dashing &amp;quot;#monitoring #item:Line&amp;quot; \ --label=&amp;quot;#eeeee;order:24&amp;quot; \ --label=&amp;quot;#e8f1f4;bg-color&amp;quot; \ --label=&amp;quot;#eeeeee;width:76%&amp;quot; \ --label=&#39;#eeeeee;widget-data-labels:Mon Tue Wed Thu Fri Sat&#39; \ --label=&#39;#eeeeee;widget-data-options:low:0 showArea:true showPoint:false fullWidth:true&#39; \ --label=&#39;#eeeeee;widget-data-series:1 5 2 5 4 3&#39; \ --label=&#39;#eeeeee;widget-data-series:2 3 4 8 1 2&#39; \ --label=&#39;#eeeeee;widget-data-series:5 4 3 2 1 0.</description>
    </item>
    
    <item>
      <title>tatcli stats -h</title>
      <link>https://ovh.github.io/tat/tatcli/tatcli-stats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatcli/tatcli-stats/</guid>
      <description> Command Description tatcli stats -h Stats commands (admin only): tatcli stats [&amp;lt;command&amp;gt;] Usage: tatcli stats [command] Aliases: stats, stat Available Commands: count Count all messages, groups, presences, users, groups, topics: tatcli stats count distribution Distribution of messages per topics: tatcli stats distribution dbstats DB Stats: tatcli stats dbstats dbServerStatus DB Stats: tatcli stats dbServerStatus dbReplSetGetConfig DB Stats: tatcli stats dbReplSetGetConfig dbReplSetGetStatus DB Stats: tatcli stats dbReplSetGetStatus dbCollections DB Stats on each collection: tatcli stats dbCollections dbSlowestQueries DB Stats slowest Queries: tatcli stats dbSlowestQueries instance Info about current instance of engine Flags: -h, --help=false: help for stats Global Flags: see tatcli -h  </description>
    </item>
    
    <item>
      <title>Release View</title>
      <link>https://ovh.github.io/tat/tatwebui/releaseview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatwebui/releaseview/</guid>
      <description>Screenshot Using A release message :
#release:test a title  A release message with attributes :
#release:test #attr:EU #attr:CA a title  A release message with a forced date and attributes :
#release:test #attr:EU #attr:CA #date:2015-12-24 a title  And replies to complete informations about release :
#fix: a fix here  #feat: a new feature  First tag of reply will become a section (#feat, #fix, #whatever)
Example The screenshot above was created with these messages.</description>
    </item>
    
    <item>
      <title>tatcli system -h</title>
      <link>https://ovh.github.io/tat/tatcli/tatcli-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatcli/tatcli-system/</guid>
      <description> Command Description tatcli system -h System commands (admin only): tatcli system [&amp;lt;command&amp;gt;] Usage: tatcli system [command] Aliases: system, sys Available Commands: cacheclean Clean Cache: tatcli system cacheclean cacheinfo Info on Cache: tatcli system cacheinfo  </description>
    </item>
    
    <item>
      <title>tatcli topic -h</title>
      <link>https://ovh.github.io/tat/tatcli/tatcli-topic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatcli/tatcli-topic/</guid>
      <description>Command Description tatcli topic -h Topic commands: tatcli topic [command] Usage: tatcli topic [command] Aliases: topic, t Available Commands: addAdminGroup Add Admin Groups to a topic: tatcli topic addAdminGroup [--recursive] &amp;lt;topic&amp;gt; &amp;lt;groupname1&amp;gt; [groupname2]... addAdminUser Add Admin Users to a topic: tatcli topic addAdminUser [--recursive] &amp;lt;topic&amp;gt; &amp;lt;username1&amp;gt; [username2]... addParameter Add Parameter to a topic: tatcli topic addParameter [--recursive] &amp;lt;topic&amp;gt; &amp;lt;key&amp;gt;:&amp;lt;value&amp;gt; [&amp;lt;key2&amp;gt;:&amp;lt;value2&amp;gt;]... addRoGroup Add Read Only Groups to a topic: tatcli topic addRoGroup [--recursive] &amp;lt;topic&amp;gt; &amp;lt;groupname1&amp;gt; [&amp;lt;groupname2&amp;gt;].</description>
    </item>
    
    <item>
      <title>tatcli ui -h</title>
      <link>https://ovh.github.io/tat/tatcli/tatcli-ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatcli/tatcli-ui/</guid>
      <description>Interactive mode of tatcli : - tatcli ui or with args : - tatcli ui /YourTopic/SubTopic /run AA,BB /hide-usernames /hide-top - tatcli ui /YourTopic/SubTopic /split label:open label:doing label:done /mode run /save - tatcli ui /YourTopic/SubTopic /run AA,BB /hide-usernames /hide-bottom /save
Shortcuts:  ---------------------------------------------- ---------------------------------------------- ||| ||| ||| ||| ||| ||| ||| ||| ||| ||| ||| ||| ||| ||| ||| ||| ||| ||| ||| ||| ||| ||| - Ctrl + a to view all topics.</description>
    </item>
    
    <item>
      <title>tatcli update -h</title>
      <link>https://ovh.github.io/tat/tatcli/tatcli-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatcli/tatcli-update/</guid>
      <description> Command Description tatcli update -h tatcli update Usage: tatcli update [flags] tatcli update [command] Aliases: update, up Available Commands: snapshot Update tatcli to latest snapshot version: tatcli update snapshot Flags: -h, --help=false: help for update Global Flags: see tatcli -h  </description>
    </item>
    
    <item>
      <title>tatcli users -h</title>
      <link>https://ovh.github.io/tat/tatcli/tatcli-user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatcli/tatcli-user/</guid>
      <description>Command Description tatcli user -h User commands: tatcli user &amp;lt;command&amp;gt; Usage: tatcli user [command] Aliases: user, u Available Commands: list List all users: tatcli user list [&amp;lt;skip&amp;gt;] [&amp;lt;limit&amp;gt;] me Get Information about you: tatcli user me contacts Get contacts presences since n seconds: tatcli user contacts &amp;lt;seconds&amp;gt; addContact Add a contact: tatcli user addContact &amp;lt;contactUsername&amp;gt; removeContact Remove a contact: tatcli user removeContact &amp;lt;contactUsername&amp;gt; addFavoriteTopic Add a favorite Topic: tatcli user addFavoriteTopic &amp;lt;topicName&amp;gt; removeFavoriteTopic Remove a favorite Topic: tatcli user removeFavoriteTopic &amp;lt;topicName&amp;gt; enableNotificationsTopic Enable notifications on a topic: tatcli user enableNotificationsTopic &amp;lt;topicName&amp;gt; enableNotificationsAllTopics Enable notifications on a topic: tatcli user enableNotificationsAllTopics disableNotificationsTopic Disable notifications on a topic: tatcli user disableNotificationsTopic &amp;lt;topicName&amp;gt; disableNotificationsAllTopics Disable notifications on all topics: tatcli user disableNotificationsAllTopics addFavoriteTag Add a favorite Tag: tatcli user addFavoriteTag &amp;lt;tag&amp;gt; removeFavoriteTag Remove a favorite Tag: tatcli user removeFavoriteTag &amp;lt;tag&amp;gt; add Add a user: tatcli user add &amp;lt;username&amp;gt; &amp;lt;email&amp;gt; &amp;lt;fullname&amp;gt; reset Ask for Reset a password: tatcli user reset &amp;lt;username&amp;gt; &amp;lt;email&amp;gt; resetSystemUser Reset password for a system user (admin only): tatcli user resetSystemUser &amp;lt;username&amp;gt; convert Convert a user to a system user (admin only): tatcli user convert &amp;lt;username&amp;gt; &amp;lt;canListUsersAsAdmin&amp;gt; updateSystemUser Update a system user (admin only): tatcli user updateSystemUser &amp;lt;username&amp;gt; &amp;lt;canListUsersAsAdmin&amp;gt; archive Archive a user (admin only): tatcli user archive &amp;lt;username&amp;gt; rename Rename username of a user (admin only): tatcli user rename &amp;lt;oldUsername&amp;gt; &amp;lt;newUsername&amp;gt; update Update Fullname and Email of a user (admin only): tatcli user update &amp;lt;username&amp;gt; &amp;lt;newEmail&amp;gt; &amp;lt;newFullname&amp;gt; setAdmin Grant user to Tat admin (admin only): tatcli user setAdmin &amp;lt;username&amp;gt; verify Verify account: tatcli user verify [--save] &amp;lt;username&amp;gt; &amp;lt;tokenVerify&amp;gt; check Check Private Topics and Default Group on one user (admin only): tatcli user check &amp;lt;username&amp;gt; &amp;lt;fixPrivateTopics&amp;gt; &amp;lt;fixDefaultGroup&amp;gt; Flags: -h, --help=false: help for user Global Flags: see tatcli -h  Examples Create a user tatcli user add username email fullname  Verify account tatcli user verify username tokenVerify  For saving configuration in $HOME/.</description>
    </item>
    
    <item>
      <title>tatcli version -h</title>
      <link>https://ovh.github.io/tat/tatcli/tatcli-version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatcli/tatcli-version/</guid>
      <description> Command Description tatcli version -h tatcli version Usage: tatcli version [flags] Aliases: version, v Flags: -h, --help=false: help for version --versionNewLine=true: New line after version number. If true, display Version Engine too Global Flags: see tatcli -h  </description>
    </item>
    
    <item>
      <title>CDS View</title>
      <link>https://ovh.github.io/tat/tatwebui/cdsview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatwebui/cdsview/</guid>
      <description>Screenshot Details of messages sent by CDS Example: message and replies created by CDS by pipeline building Tat Engine:
{ &amp;quot;_id&amp;quot;: &amp;quot;58030253dc55630001c69635&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;#cds #type:pipelineBuild #project:TAT #app:tat-engine #pipeline:build-go-api-tat #environment:NoEnv #build:74 #idp:297065 #branch:master&amp;quot;, &amp;quot;topic&amp;quot;: &amp;quot;/Internal/CDS/Notifs&amp;quot;, &amp;quot;inReplyOfID&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;inReplyOfIDRoot&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;nbLikes&amp;quot;: 0, &amp;quot;labels&amp;quot;: [ { &amp;quot;text&amp;quot;: &amp;quot;Success&amp;quot;, &amp;quot;color&amp;quot;: &amp;quot;#3c763d&amp;quot; } ], &amp;quot;nbVotesUP&amp;quot;: 0, &amp;quot;nbVotesDown&amp;quot;: 0, &amp;quot;tags&amp;quot;: [ &amp;quot;cds&amp;quot;, &amp;quot;type:pipelineBuild&amp;quot;, &amp;quot;project:TAT&amp;quot;, &amp;quot;app:tat-engine&amp;quot;, &amp;quot;pipeline:build-go-api-tat&amp;quot;, &amp;quot;environment:NoEnv&amp;quot;, &amp;quot;build:74&amp;quot;, &amp;quot;idp:297065&amp;quot;, &amp;quot;branch:master&amp;quot; ], &amp;quot;dateCreation&amp;quot;: 1476592211.0365698, &amp;quot;dateUpdate&amp;quot;: 1476592269.024161, &amp;quot;author&amp;quot;: { &amp;quot;username&amp;quot;: &amp;quot;tat.</description>
    </item>
    
    <item>
      <title>Development</title>
      <link>https://ovh.github.io/tat/tatwebui/development/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatwebui/development/</guid>
      <description>Introduction A view in Tat WebUI is a bower&amp;rsquo;s plugin. You can develop your own view to display message or add specific action on messages.
Steps Requirements #Install NodeJs [https://nodejs.org/] #Install Bower npm install -g bower #Install Grunt npm install -g grunt-cli  Tatwebui bootstrap mkdir -p $HOME/src/github.com/ovh #you can used what you want, it&#39;s just for example git clone https://github.com/ovh/tatwebui.git cd tatwebui/client touch plugin.tpl.json custom.plugin.tpl.json src/assets/config.json cd ../server touch app/config.</description>
    </item>
    
    <item>
      <title>Tat&#39;n Hack</title>
      <link>https://ovh.github.io/tat/tatnhack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatnhack/</guid>
      <description> Chapter 7 Tat&amp;rsquo;n Hack </description>
    </item>
    
    <item>
      <title>Monitoring a process with al2tat</title>
      <link>https://ovh.github.io/tat/tatnhack/monitoring-process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatnhack/monitoring-process/</guid>
      <description>Here, a script for monitoring process and send alert to al2tat.
Script checkProcess.sh:
#!/bin/bash NAME=&amp;quot;$1&amp;quot; HOSTNAME=`hostname` TAT_USER=&amp;quot;tat.system.your.user&amp;quot; TAT_PASSWORD=&amp;quot;YouTatVeryLongPassword&amp;quot; TAT_TOPIC=&amp;quot;/Internal/Alerts&amp;quot; SERVICE=&amp;quot;YourService&amp;quot; if [[ &amp;quot;x${NAME}&amp;quot; == &amp;quot;x&amp;quot; ]]; then echo &amp;quot;invalid usage, ./checkProcess.sh &amp;lt;processName&amp;gt;&amp;quot;; exit 1; fi; pgrep -l ${NAME} &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 if [[ $? -ne 0 ]]; then curl -XPOST \ -H &amp;quot;Content-Type: application/json&amp;quot; \ -H &amp;quot;Tat_username: ${TAT_USER}&amp;quot; \ -H &amp;quot;Tat_password: ${TAT_PASSWORD}&amp;quot; \ -H &amp;quot;Tat_topic: ${TAT_TOPIC}&amp;quot; \ -d &#39;{ &amp;quot;alert&amp;quot; : &amp;quot;AL&amp;quot;, &amp;quot;nbAlert&amp;quot; : 1, &amp;quot;service&amp;quot; : &amp;quot;&#39;${SERVICE}&#39;&amp;quot;, &amp;quot;summary&amp;quot; : &amp;quot;&#39;${NAME}&#39; is down on &#39;${HOSTNAME}&#39;&amp;quot; }&#39; https://&amp;lt;url2tat&amp;gt;/alarm/sync fi;  Crontab</description>
    </item>
    
    <item>
      <title>Visual Feedback</title>
      <link>https://ovh.github.io/tat/tatnhack/visual-feedback/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatnhack/visual-feedback/</guid>
      <description>Visual Feedback is a way to be alerted with lights, LED Strip lights or something else.
Principles:
 a message is created on tat script check.sh use tatcli to check if a new message arrives. on new message, chech.sh writes on /dev/ttyACM0 device an arduino, with a LED Strip interprets request to turn on the LEDs  You need:
 Arduino Nano or Uno 470Ω resistor A WS2812 strip 1000ųF capacitor 5V DC 2A Power Supply  See http://www.</description>
    </item>
    
    <item>
      <title>Simple Installation</title>
      <link>https://ovh.github.io/tat/engine/simple-installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/engine/simple-installation/</guid>
      <description>Prerequisites  MongoDB &amp;gt;= 3.2 Download latest release of Tat  OSX https://github.com/ovh/tat/releases/download/RELEASE_VERSION/tat-darwin-amd64 Linux https://github.com/ovh/tat/releases/download/RELEASE_VERSION/tat-linux-amd64 replace RELEASE_VERSION with latest release from https://github.com/ovh/tat/releases   Run in Development Mode  Start Tat without SMTP Server. Mails sent will be displayed in console.  $ mv tat-&amp;lt;architecture&amp;gt; tat $ chmod +x tat $ ./tat --no-smtp  Output logs:
./api --no-smtp [GIN-debug] [WARNING] Running in &amp;quot;debug&amp;quot; mode. Switch to &amp;quot;release&amp;quot; mode in production.</description>
    </item>
    
    <item>
      <title>Installation - Production Way</title>
      <link>https://ovh.github.io/tat/engine/production-installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/engine/production-installation/</guid>
      <description>Don&amp;rsquo;t worry, this installation describes below is used @ OVH to handle at least:
 800.000 GET / 2 hours 50.000 POST / 2 hours 30.000 DELETE / 2 hours 45.000 PUT / 2 hours  Prerequisites  MongoDB &amp;gt;= 3.2, with ReplicaSet Redis with Slave and Sentinel Download latest release of Tat  OSX https://github.com/ovh/tat/releases/download/RELEASE_VERSION/tat-darwin-amd64 Linux https://github.com/ovh/tat/releases/download/RELEASE_VERSION/tat-linux-amd64 replace RELEASE_VERSION with latest release from https://github.com/ovh/tat/releases   Run in Production Mode #!</description>
    </item>
    
    <item>
      <title>Ecosystem</title>
      <link>https://ovh.github.io/tat/ecosystem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/ecosystem/</guid>
      <description> Chapter 6 Ecosystem </description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://ovh.github.io/tat/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/overview/</guid>
      <description>Chapter 1 TAT Overview Discover what is Tat and the core-concepts behind it.</description>
    </item>
    
    <item>
      <title>Tat CLI Reference</title>
      <link>https://ovh.github.io/tat/tatcli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatcli/</guid>
      <description>Chapter 4 TATCLI Reference</description>
    </item>
    
    <item>
      <title>Tat Engine Reference</title>
      <link>https://ovh.github.io/tat/engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/engine/</guid>
      <description>Chapter 3 Tat Engine Reference</description>
    </item>
    
    <item>
      <title>Tat SDK</title>
      <link>https://ovh.github.io/tat/sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/sdk/</guid>
      <description>Chapter 5 Overview TAT SDK
Godoc</description>
    </item>
    
    <item>
      <title>Tat Webui</title>
      <link>https://ovh.github.io/tat/tatwebui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ovh.github.io/tat/tatwebui/</guid>
      <description> Chapter 2 Tat Webui </description>
    </item>
    
  </channel>
</rss>